@page "/Inscripcion"
@page "/Inscripcion/{IncripcionId:int}"

@inject IToastService toast

<div class="shadow-lg p-3 mb-5 bg-white rounded">

    <EditForm Model="inscripcion" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card">

            <div class="card-header">
                <h3>Registro de Inscripcion</h3>
            </div>

            <div class="card-body">
                <form>
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>Id</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="this.IncripcionId" class="form-control" />
                                    <div class="input-group-append">
                                        <button type="button" style="z-index:0" class="btn btn-secondary" @onclick="Buscar">Buscar</button>
                                    </div>
                                    <ValidationMessage For="@(() => inscripcion.IncripcionId)" />
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Fecha*@
                    <div class="form-group">
                        <label>Fecha</label>
                        <InputDate @bind-Value="inscripcion.Fecha" class="form-control" />
                        <ValidationMessage For="@(() => inscripcion.Fecha)" />
                    </div>

                </form>

                @*Estudiantes*@

            <div class="form-group">
                <label>Estudiantes</label>
                <InputSelect @bind-Value="inscripcion.EstudianteId" class="form-control">
                    <option value="0" disabled selected>Seleccione un estudiante</option>
                    @foreach (var item in listestud)
                    {
                        <option value="@item.EstudianteId">@item.Nombres</option>
                    }

                </InputSelect>
                <ValidationMessage For="(() => inscripcion.EstudianteId)" />
            </div>

                @*Asignatura*@
            <div class="form-group">
                <label>Asignatura</label>
                <InputSelect @bind-Value="inscripcion.AsignaturaId" class="form-control">
                    <option value="0" disabled selected>Seleccione una asignatura</option>
                    @foreach (var item in listAsignat)
                    {
                        <option value="@item.AsignaturaId">@item.Descripcion</option>
                    }
                </InputSelect>
                <ValidationMessage For="(() => inscripcion.AsignaturaId)" />
                </div>

                @*Semestres*@
                <div class=" form-group">
                    <label>Semestres</label>
                    <InputSelect @bind-Value="inscripcion.SemestreId" class="form-control">
                        <option value="0" disabled selected>Seleccione el semestres</option>
                        @foreach (var item in listSemestres)
                      {
                        <option value="@item.SemestreId">@item.Descripcion</option>
                      }
                    </InputSelect>
            </div>

            </div>
        </div>

        <div class="card">

            <div class="card-footer">
                <div class="form-group text-center">
                    <div class="form-group text-center">
                        <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo</button>
                        <button type="submit" class="btn btn-success">Guardar</button>
                        <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
                    </div>
                </div>
            </div>

        </div>
    </EditForm>

</div>


@code {

    [Inject]
    private InscripcionBLL inscripcionBLL { get; set; }

    [Inject]
    private EstudiantesBLL estudiantesBLL { get; set; }

    [Inject]
    private SemestresBLL semestresBLL { get; set; }

    [Inject]
    private AsignaturasBLL asignaturasBLL { get; set; }

    [Parameter]
    public int IncripcionId { get; set; }
    private Inscripcion inscripcion = new Inscripcion();
    private Estudiantes estudiantes = new Estudiantes();
    private Semestres semestres = new Semestres();
    private Asignaturas asignaturas = new Asignaturas();

    List<Estudiantes> listestud = new List<Estudiantes>();
    List<Asignaturas> listAsignat = new List<Asignaturas>();
    List<Semestres> listSemestres = new List<Semestres>();

    protected override async Task OnInitializedAsync()
    {
        listestud = await estudiantesBLL.Getlist(p => true);
        listAsignat = await asignaturasBLL.GetList(p => true);
        listSemestres = await semestresBLL.Getlist(p => true);
        Nuevo();
    }

    public async void Buscar()
    {
        var registro = await inscripcionBLL.Buscar(inscripcion.IncripcionId);

        if (registro != null)
        {
            this.inscripcion = registro;

        }
        else
        {
            toast.ShowInfo("pudo ser encontrado el registro.");
        }
    }




    public void Nuevo()
    {
        Limpiar();
    }

    public async void Guardar()
    {

        if (await inscripcionBLL.Guardar(inscripcion))
        {

            toast.ShowInfo("Guardado");
            Limpiar();

        }
        else
        {
            toast.ShowInfo("No se ser guardado  el registro.");

        }
    }

    public async void Eliminar()
    {
        if (await inscripcionBLL.Eliminar(inscripcion.IncripcionId))
        {
            toast.ShowInfo("Eliminado");
            Limpiar();
        }
        else
        {
            toast.ShowInfo("No se logró eliminar el registro.");

        }
    }

    public void Limpiar()
    {
        this.inscripcion = new Inscripcion();
    }
}
