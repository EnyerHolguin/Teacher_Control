@page "/Teacher"
@page "/Teacher/{TeacherId:int}"

@inject IToastService toast

<div class="shadow-lg p-3 mb-5 bg-white rounded">

    <EditForm Model="teacherControl" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card">

            <div class="card-header">
                <h3>teacher Control</h3>
            </div>

            <div class="card-body">
                <form>
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>Id</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="teacherControl.TeacherId" class="form-control" />
                                    <div class="input-group-append">
                                        <button type="button" style="z-index:0" class="btn btn-secondary" @onclick="Buscar">Buscar</button>
                                    </div>
                                    <ValidationMessage For="@(() => teacherControl.TeacherId)" />
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Fecha*@


                </form>

                @*Cliente*@

            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <div class="table-responsive text-nowrap" style="position: relative; height:200px; overflow: auto; display: block;">
                    <table class="table table-striped">
                        <thead class="thead-light">
                            <tr>
                                <th>Estudiante Id</th>
                                <th>Nombres</th>
                                <th>Apellidos</th>
                                <th>Matricula</th>
                                <th>Primer Parcial</th>
                                <th>Segundo Parcial</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white">
                        </tbody>
                    </table>
                </div>

            </div>

                <tbody class="bg-white">

                    @foreach (var item in listestud)
                    {
                        <tr>
                            <td>@item.EstudianteId</td>
                            <td>@item.Nombres</td>
                            <td>@item.Apellidos</td>
                            <td>@item.Matricula</td>
                            <td>
                                <InputNumber @bind-Value="teacherControl.Primer_parcial" class="form-control" />
                                <ValidationMessage For="@(() => teacherControl.Primer_parcial)" />
                            </td>
                           
                            
                        </tr>
                    }

                </tbody>

           
            <div class="card-footer">
                <div class="form-group text-center">
                    <div class="form-group text-center">
                        <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo</button>
                        <button type="submit" class="btn btn-success">Guardar</button>
                        <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
                    </div>
                </div>
            </div>

        </div>
    </EditForm>

</div>



@code{

    [Inject]
    private InscripcionBLL inscripcionBLL { get; set; }

    [Inject]
    private AsignaturasBLL asignaturasBLL { get; set; }

    [Inject]
    private EstudiantesBLL estudiantesBLL { get; set; }

    [Inject]
    private TeacherControlBLL teacherControlBLL { get; set; }

    [Inject]
    private SemestresBLL semestresBLL { get; set; }

    List<Estudiantes> listestud = new List<Estudiantes>();
    List<Asignaturas> listAsignat = new List<Asignaturas>();
    List<Semestres> listSemestres = new List<Semestres>();
    List<Inscripcion> listIncrip = new List<Inscripcion>();
    List<TeacherControl> TeacherList = new List<TeacherControl>();

    [Parameter]
    public int TeacherId { get; set; }
    private TeacherControl teacherControl = new TeacherControl();
    private Inscripcion inscripcion = new Inscripcion();
    private Estudiantes estudiantes = new Estudiantes();
    private Semestres semestres = new Semestres();
    private Asignaturas asignaturas = new Asignaturas();


    protected override async Task OnInitializedAsync()
    {

        listestud = await estudiantesBLL.GetEstudiantes();
        listIncrip = await inscripcionBLL.GetInscripcion();

        Nuevo();
    }


    public async void Buscar()
    {
        var teacherContro = await teacherControlBLL.Buscar(teacherControl.TeacherId);
        if (teacherContro != null)
        {
            this.teacherControl = teacherContro;
        }
        else
        {
            toast.ShowInfo("No se encontro el registro");
        }
    }

    public async void Guardar()
    {
        if (await teacherControlBLL.Guardar(teacherControl))
        {
            toast.ShowSuccess("Guardado");
            Limpiar();
        }
        else
        {
            toast.ShowError("No fue posible guardar");
        }
    }

    public async void Eliminar()
    {
        if (await teacherControlBLL.Eliminar(teacherControl.TeacherId))
        {
            toast.ShowSuccess("Eliminado correctamente.");
            Limpiar();
        }
        else
        {
            toast.ShowError("No fue posible eliminar.");
        }
    }

    public void Nuevo()
    {
        Limpiar();
    }

    public void Limpiar()
    {
        this.teacherControl = new TeacherControl();
    }
}