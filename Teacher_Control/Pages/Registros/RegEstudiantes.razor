@using Teacher_Control.BLL;
@using Teacher_Control.Models;
@page "/Estudiantes"
@page "/Estudiantes/{EstudianteId:int}"



<EditForm Model="estudiantes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Estudiantes</h3>
        </div>

        <div class="card-body">
            <form>

                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>Estudiante Id</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="estudiantes.EstudianteId" class="form-control" />
                                <div class="input-group-append ml-2">
                                    <button type="button" style="z-index:0" class="btn btn-secondary input-group-text" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label>Nombres</label>
                    <InputText @bind-Value="estudiantes.Nombres" class="form-control" />
                    <ValidationMessage For="@(() => estudiantes.Nombres)" />
                </div>

                <div class="form-group">
                    <label>Apellidos</label>
                    <InputText @bind-Value="estudiantes.Apellidos" class="form-control" />
                    <ValidationMessage For="@(() => estudiantes.Apellidos)" />
                </div>

                <div class="form-group">
                    <label>Teléfono</label>
                    <InputText @bind-Value="estudiantes.Telefono" class="form-control" />
                    <ValidationMessage For="@(() => estudiantes.Telefono)" />
                </div>


                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="estudiantes.Email" class="form-control" />
                    <ValidationMessage For="(() => estudiantes.Email)" />
                </div>

        


        <div class="form-group">
            <label>Fecha Nacimiento</label>
            <InputDate @bind-Value="estudiantes.FechaNacimiento" class="form-control" />
            <ValidationMessage For="(() => estudiantes.FechaNacimiento)" />
        </div>

        <div class="form-group">
            <label>Matricula</label>
            <InputNumber @bind-Value="estudiantes.Matricula" class="form-control" />
            <ValidationMessage For="@(() => estudiantes.Matricula)" />
        </div>

        </form>
    </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-success">Guardar</button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>

    </div>
</EditForm>

@code {
    string Mensaje = string.Empty;

    [Inject]
    private EstudiantesBLL estudiantesBLL { get; set; }

    [Parameter]
    public int EstudianteId { get; set; }

    Estudiantes estudiantes = new Estudiantes();

    protected override void OnInitialized()
    {
        Nuevo();
    }

    public async void Buscar()
    {
        var registro = await estudiantesBLL.Buscar(estudiantes.EstudianteId);

        if (registro != null)
        {
            this.estudiantes = registro;

        }
        else
        {
            Mensaje = ("pudo ser encontrado el registro.");
        }
    }

    public void Nuevo()
    {
        Limpiar();
    }

    public async void Guardar()
    {

        if (await estudiantesBLL.Guardar(estudiantes))
        {

            Mensaje = ("Guardado");
            Limpiar();

        }
        else
        {
            Mensaje = ("No se ser guardado  el registro.");

        }
    }

    public async void Eliminar()
    {
        if (await estudiantesBLL.Eliminar(estudiantes.EstudianteId))
        {
            Mensaje = ("Eliminado");
            Limpiar();
        }
        else
        {
            Mensaje = ("No se logró eliminar el registro.");

        }
    }

    public void Limpiar()
    {
        this.estudiantes = new Estudiantes();
    }


}