@page "/Semestres"
@page "/Semestres/{SemestreId:int}"

@inject IToastService toast

<EditForm Model="semestres" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro del Semestres</h3>
        </div>

        <div class="card-body">
            <form>

                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>Semestres Id</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="semestres.SemestreId" class="form-control" />
                                <div class="input-group-append ml-2">
                                    <button type="button" style="z-index:0" class="btn btn-secondary input-group-text" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label>Descripcion</label>
                    <InputText @bind-Value="semestres.Descripcion" class="form-control" />
                    <ValidationMessage For="@(() => semestres.Descripcion)" />
                </div>



            </form>
        </div>
        <h3>@Mensaje</h3>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-success">Guardar</button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>

    </div>
</EditForm>

@code {
    string Mensaje = string.Empty;

    [Inject]
    private SemestresBLL semestresBLL { get; set; }

    [Parameter]
    public int SemestreId { get; set; }

    Semestres semestres = new Semestres();

    protected override void OnInitialized()
    {
        Nuevo();
    }

    public async void Buscar()
    {
        var registro = await semestresBLL.Buscar(semestres.SemestreId);

        if (registro != null)
        {
            this.semestres = registro;

        }
        else
        {
            toast.ShowInfo("No pudo ser encontrado el registro.");
            //Mensaje = (" no pudo ser encontrado el registro.");
        }
    }

    public void Nuevo()
    {
        Limpiar();
    }

    public async void Guardar()
    {

        if (await semestresBLL.Guardar(semestres))
        {

            //Mensaje = ("Guardado");
            toast.ShowSuccess("Guardado.");
            Limpiar();

        }
        else
        {
            // Mensaje = ("No se ser guardado  el registro.");
            toast.ShowError("Error al guardar el registro.");

        }
    }

    public async void Eliminar()
    {
        this.SemestreId = semestres.SemestreId;
        if (await semestresBLL.Eliminar(semestres.SemestreId))
        {
            //Mensaje = ("Eliminado");
            toast.ShowSuccess("Eliminado");
            Limpiar();
        }
        else
        {
            //Mensaje = ("No se logró eliminar el registro.");
            toast.ShowError("Error al eliminar el registro.");

        }
    }

    public void Limpiar()
    {
        this.semestres = new Semestres();
    }


}
